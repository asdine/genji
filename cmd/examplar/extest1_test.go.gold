package main

import (
    "encoding/json"
    "testing"

    "github.com/genjidb/genji"
    "github.com/genjidb/genji/document"
    "github.com/genjidb/genji/query"
    "github.com/stretchr/testify/require"
)

func TestFooBar(t *testing.T) {
    db, err := genji.Open(":memory:")
    require.NoError(t, err)
    defer db.Close()

    // query results wrapper
    jsonResult := func(t *testing.T, res *query.Result) []byte {
        t.Helper()
        vb := document.NewValueBuffer()
        err = res.Iterate(func(d document.Document) error {
            vb = vb.Append(document.NewDocumentValue(d))
            return nil
        })
        require.NoError(t, err)
        data, err := json.Marshal(vb)
        require.NoError(t, err)
        return data
    }

    // teardown
    teardown := func() {
        // extest1.sql:5
        q := `
        DROP TABLE foo;
        `
        err := db.Exec(q)
        require.NoError(t, err)
    }

    // setup
    setup := func() {
        // extest1.sql:2
        q := `
        CREATE TABLE foo (a int);
        `
        err := db.Exec(q)
        require.NoError(t, err)
    }
    
    // extest1.sql:7
    t.Run("insert something", func(t *testing.T) {
        t.Cleanup(teardown)
        setup()

        var err error
        var data []byte
        var expected string
        var q string
        var res *query.Result
        
        // extest1.sql:8
        q = `
        INSERT INTO foo (a) VALUES (1);
        SELECT * FROM foo;
        `

        res, err = db.Query(q)
        require.NoError(t, err)
        defer res.Close()

        data = jsonResult(t, res)
        require.NoError(t, err)
        
        expected = `[{"a": 1}]` // extest1.sql:10
        require.JSONEq(t, expected, string(data))
        // extest1.sql:12
        q = `
        SELECT a, b FROM foo;
        `

        res, err = db.Query(q)
        require.NoError(t, err)
        defer res.Close()

        data = jsonResult(t, res)
        require.NoError(t, err)
        
        // extest1.sql:14
        expected = `
         [{
           "a": 1,
           "b": null
         }]
        `
        require.JSONEq(t, expected, string(data))
        // extest1.sql:20
        q = `
        SELECT z FROM foo;
        `

        res, err = db.Query(q)
        require.NoError(t, err)
        defer res.Close()

        data = jsonResult(t, res)
        require.NoError(t, err)
        
        expected = `[{"z": null}]` // extest1.sql:21
        require.JSONEq(t, expected, string(data))
    })
    
    // extest1.sql:23
    t.Run("something else", func(t *testing.T) {
        t.Cleanup(teardown)
        setup()

        var err error
        var data []byte
        var expected string
        var q string
        var res *query.Result
        
        // extest1.sql:24
        q = `
        INSERT INTO foo (c) VALUES (3);
        SELECT * FROM foo;
        `

        res, err = db.Query(q)
        require.NoError(t, err)
        defer res.Close()

        data = jsonResult(t, res)
        require.NoError(t, err)
        
        expected = `[{"c": 3}]` // extest1.sql:26
        require.JSONEq(t, expected, string(data))
    })
    
 }
