name: Fuzz
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  run:
    name: Run
    runs-on: ubuntu-latest
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOFLAGS: '-trimpath -mod=readonly'
      GO111MODULE: 'on'
    strategy:
      fail-fast: false
      matrix:
        go:
          # Misplaced compiler directive error with Go 1.15.x.
          # https://github.com/dvyukov/go-fuzz/issues/294
          # Keep this version fixed so that we can analyze
          # coverage profiles locally.
          - 1.14.9
        goos:
          - linux
        goarch:
          - amd64
        func:
          - FuzzParseQuery
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          path: genji

      - name: Checkout corpus
        uses: actions/checkout@v2
        with:
          repository: genjidb/go-fuzz-corpus
          path: genji/fuzz/testdata/fuzz

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Get cache path
        # FIXME use GOMODCACHE instead of GOPATH once
        # https://github.com/dvyukov/go-fuzz/issues/294
        # is fixed and we can bump Go to 1.15 or greater.
        run: echo "::set-output name=dir::$(go env GOPATH)"
        id: modcache

      - name: Set up cache
        uses: actions/cache@v2
        with:
          # FIXME remove -fuzz- once we can use GOMODCACHE
          path: ${{ steps.modcache.outputs.dir }}
          key: modcache-fuzz-${{ matrix.goos }}-${{ matrix.goarch }}-${{ hashFiles('**/go.sum') }}
          restore-keys: modcache-fuzz-

      - name: Download dependencies
        run: go mod download
        working-directory: genji/fuzz

      # Using libFuzzer
      #
      # - https://github.com/mdempsky/go114-fuzz-build
      #   https://google.github.io/oss-fuzz/getting-started/new-project-guide/go-lang/
      #
      #   go114-fuzz-build -o fuzz.a .
      #   clang -fsanitize=fuzzer -o fuzz fuzz.a
      #
      # - https://github.com/dvyukov/go-fuzz#libfuzzer-support
      #
      #   go-fuzz-build -libfuzzer -o fuzz.a
      #   clang -fsanitize=fuzzer -o fuzz fuzz.a
      #
      # ./fuzz -max_len=1024 -max_total_time=300 corpus
      #
      # I haven’t tried go114-fuzz-build which uses builtin Go libFuzzer support,
      # but I’ve had a better experience with go-fuzz vs libFuzzer without corpus.

      - name: Run tests
        run: |
          go run github.com/dvyukov/go-fuzz/go-fuzz-build -func ${{ matrix.func }} && timeout -s INT -k 30 300 \
          go run github.com/dvyukov/go-fuzz/go-fuzz -workdir=testdata/fuzz/${{ matrix.func }} -dumpcover || true
          if [ -d crashers ]; then
            exit 1
          fi
        working-directory: genji/fuzz

      - name: Prepare report
        if: ${{ success() || failure() }}
        id: report
        run: |
          mv testdata/fuzz/${{ matrix.func }}/coverprofile coverprofile-coverage.out
          mv testdata/fuzz/${{ matrix.func }}/sonarprofile sonarprofile-coverage.out

          # go-fuzz dumps coverage profiles that are not reproducible.
          # We fix that by trimming absolute paths.
          perl -pi -e '
            s:^/opt/.*/src/::;
            s:^/home/.*/mod/(.*)@[^/]*:\1:;
            s:^/home/.*(?!/cmd)/genji/:github.com/genjidb/genji/:;
          ' coverprofile-coverage.out sonarprofile-coverage.out

          # https://github.com/dvyukov/go-fuzz/issues/170#issuecomment-462297614
          perl -ni -e 'print unless /0.0,1.1/' coverprofile-coverage.out
        working-directory: genji/fuzz

      - name: Upload coverage
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.func }}_cover_go${{ matrix.go }}
          path: genji/fuzz/*coverage.*

      - name: Upload corpus
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.func }}_corpus
          path: genji/fuzz/testdata/fuzz/${{ matrix.func }}
