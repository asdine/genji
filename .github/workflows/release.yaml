name: Release
on:
  push:
    branches:
      - release
      - release-v*
  workflow_dispatch:
    inputs:
      base:
        description: 'Base version'
        required: false
        default: ''
      version:
        description: 'New version'
        required: false
        default: ''

env:
  # Ensure that we have a chance to remove tags for failed release
  # before they are added to global sumdb and goproxy cache.
  #
  # Use version retraction if we can’t safely revert release.
  # See https://blog.golang.org/go116-module-changes#TOC_5.
  GOPRIVATE: github.com/genjidb/genji
  # Enable reproducible builds.
  GOFLAGS: -trimpath
  CGO_ENABLED: '0'
  GO_EXTLINK_ENABLED: '0'

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.changelog.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4

      - name: Install Go
        uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.16.3

      - name: Get Go environment
        id: go-env
        run: |
          echo "::set-output name=cache::$(go env GOCACHE)"
          echo "::set-output name=modcache::$(go env GOMODCACHE)"

      - name: Set up cache
        uses: actions/cache@v2.1.5
        with:
          path: |
            ${{ steps.go-env.outputs.cache }}
            ${{ steps.go-env.outputs.modcache }}
          key: prepare-go-${{ hashFiles('**/go.sum') }}
          restore-keys: prepare-go-

      - name: Install x/exp/cmd/gorelease
        run: go install golang.org/x/exp/cmd/gorelease@v0.0.0-20210513165259-bd7cc9f9ec66

      - name: Set up Git config
        run: |
          git config user.name actions-user
          git config user.email actions@github.com

      # Get current branch name and infer version for this release.
      #
      # Uses explicit version input if we are running on manual workflow dispatch.
      # If we are on release branch with explicit version (e.g. release-v0.13.0)
      # then branch != strip_prefix(branch, "release-") and we use branch version.
      # Otherwise use empty version and gorelease would suggest a new semantic version.
      #
      # Note that gorelease will fail if the supplied version is not a valid semantic
      # version for this release.
      #
      - name: Get version
        id: version
        env:
          base: ${{ github.event.inputs.base }}
          next: ${{ github.event.inputs.version }}
        run: |
          branch=${GITHUB_REF#refs/heads/}
          branchversion=${branch#release-}
          if [ "${next}" = "" -a "${branch}" != "${branchversion}" ]; then
            next=${branchversion}
          fi
          echo "::set-output name=base::${base}"
          echo "::set-output name=next::${next}"

      # Check github.com/genjidb/genji module.
      #
      # This step will fail if version from input is not a valid semantic version for this release.
      # We use the version suggested by gorelease tool if there is no input (workflow on push event).
      # The base version is inferred from the new version and defaults to latest release.
      #
      - name: Generate changelog
        env:
          base: ${{ steps.version.outputs.base }}
          version: ${{ steps.version.outputs.next }}
        run: |
          gorelease -base="${base}" -version="${version}" | tee changelog.txt
      - name: Extract version from changelog
        id: changelog
        run: |
          perl -n -e '
            if (s/^Suggested version: (.*)/::set-output name=version::$1/) { print }
            if (s/^(.*) is a valid semantic version for this release.$/::set-output name=version::$1/) { print }
          ' changelog.txt
      - name: Amend changelog
        run: perl -0pi -e 's/(\n.+)+\n+$//' changelog.txt

      # Check github.com/genjidb/genji/engine/badgerengine module.
      #
      # Note that we use steps.changelog.outputs.version instead of steps.version.outputs.next
      # to ensure that submodule version always corresponds to root module release.
      #
      - name: Generate changelog for engine/badgerengine
        working-directory: engine/badgerengine
        env:
          base: ${{ github.event.inputs.base }}
          version: ${{ steps.changelog.outputs.version }}
        run: |
          gorelease -base="${base}" -version="${version}" | tee changelog.txt
      - name: Amend changelog for engine/badgerengine
        working-directory: engine/badgerengine
        run: perl -0pi -e 's/(\n.+)+\n+$//' changelog.txt

      # Prepare release notes. We’ll use these later to create draft release.
      #
      - name: Concatenate release notes
        run: |
          if [ -f CHANGELOG.md ]; then
            cp CHANGELOG.md release.txt
          else
            touch release.txt
          fi
          echo >>release.txt
          echo --- >>release.txt
          echo >>release.txt
          cat changelog.txt >>release.txt
          echo >>release.txt
          cat engine/badgerengine/changelog.txt >>release.txt
      - uses: actions/upload-artifact@v2.2.3
        with:
          name: release.txt
          path: release.txt
          if-no-files-found: error
          retention-days: 1

  tag1:
    name: Tag github.com/genjidb/genji
    runs-on: ubuntu-latest
    needs:
      - prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4
      - name: Install Go
        uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.16.3
      - name: Get Go environment
        id: go-env
        run: |
          echo "::set-output name=cache::$(go env GOCACHE)"
          echo "::set-output name=modcache::$(go env GOMODCACHE)"
      - name: Set up cache
        uses: actions/cache@v2.1.5
        with:
          path: |
            ${{ steps.go-env.outputs.cache }}
            ${{ steps.go-env.outputs.modcache }}
          key: tag1-go-${{ hashFiles('**/go.sum') }}
          restore-keys: tag1-go-
      - name: Set up Git config
        run: |
          git config user.name actions-user
          git config user.email actions@github.com
      - name: Bump github.com/genjidb/genji
        env:
          version: ${{ needs.prepare.outputs.version }}
        run: |
          git commit --allow-empty -m "Bump version to ${version}"
          git tag "${version}"
          git push origin "${version}"

  tag2:
    name: Tag github.com/genjidb/genji/engine/badgerengine
    runs-on: ubuntu-latest
    needs:
      - prepare
      - tag1
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4
      - name: Install Go
        uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.16.3
      - name: Get Go environment
        id: go-env
        run: |
          echo "::set-output name=cache::$(go env GOCACHE)"
          echo "::set-output name=modcache::$(go env GOMODCACHE)"
      - name: Set up cache
        uses: actions/cache@v2.1.5
        with:
          path: |
            ${{ steps.go-env.outputs.cache }}
            ${{ steps.go-env.outputs.modcache }}
          key: tag2-go-${{ hashFiles('**/go.sum') }}
          restore-keys: tag2-go-
      - name: Set up Git config
        run: |
          git config user.name actions-user
          git config user.email actions@github.com
      - name: Bump github.com/genjidb/genji/engine/badgerengine
        working-directory: engine/badgerengine
        env:
          version: ${{ needs.prepare.outputs.version }}
        run: |
          go mod edit -dropreplace=github.com/genjidb/genji
          go mod edit -require=github.com/genjidb/genji@"${version}"
          go mod tidy
          git add go.mod go.sum
          git commit --allow-empty -m "Bump version to ${version}"
          git tag engine/badgerengine/"${version}"
          git push origin engine/badgerengine/"${version}"

  tag3:
    name: Tag github.com/genjidb/genji/cmd/genji
    runs-on: ubuntu-latest
    needs:
      - prepare
      - tag1
      - tag2
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4
      - name: Install Go
        uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.16.3
      - name: Get Go environment
        id: go-env
        run: |
          echo "::set-output name=cache::$(go env GOCACHE)"
          echo "::set-output name=modcache::$(go env GOMODCACHE)"
      - name: Set up cache
        uses: actions/cache@v2.1.5
        with:
          path: |
            ${{ steps.go-env.outputs.cache }}
            ${{ steps.go-env.outputs.modcache }}
          key: tag3-go-${{ hashFiles('**/go.sum') }}
          restore-keys: tag3-go-
      - name: Set up Git config
        run: |
          git config user.name actions-user
          git config user.email actions@github.com
      - name: Bump github.com/genjidb/genji/cmd/genji
        working-directory: cmd/genji
        env:
          version: ${{ needs.prepare.outputs.version }}
        run: |
          go mod edit \
            -dropreplace=github.com/genjidb/genji \
            -dropreplace=github.com/genjidb/genji/engine/badgerengine
          go mod edit \
            -require=github.com/genjidb/genji@"${version}" \
            -require=github.com/genjidb/genji/engine/badgerengine@"${version}"
          go mod tidy
          git add go.mod go.sum
          git commit --allow-empty -m "Bump version to ${version}"
          git tag cmd/genji/"${version}"
          git push origin cmd/genji/"${version}"

  draft:
    name: Draft
    runs-on: ubuntu-latest
    needs:
      - prepare
      - tag1
      - tag2
      - tag3
    steps:
      - uses: actions/download-artifact@v2.0.9
        with:
          name: release.txt
      - name: Draft release
        run: gh release create -R="${repo}" -t="${release_name}" -F="${body_path}" -d="${draft}" -p="${prerelease}" "${tag_name}"
        env:
          repo: ${{ github.repository }}
          release_name: ${{ needs.prepare.outputs.version }}
          body_path: release.txt
          draft: true
          prerelease: ${{ contains(needs.prepare.outputs.version, '-') }}
          tag_name: ${{ needs.prepare.outputs.version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
