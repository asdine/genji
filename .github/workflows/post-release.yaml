name: Post-release
on:
  workflow_run:
    workflows:
      - Release
    types:
      - completed

jobs:
  load:
    name: Load version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Download artifact
        uses: actions/github-script@v4.0.2
        env:
          run_id: ${{ github.event.workflow_run.id }}
          workspace: ${{ github.workspace }}
        with:
          script: |
            const fs = require('fs')
            const runID = parseInt(process.env.run_id)
            const artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: runID,
            })
            const matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == 'version.txt'
            })[0]
            const download = await github.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            })
            fs.writeFileSync(`${process.env.workspace}/version.zip`, Buffer.from(download.data))
      - name: Load version
        id: version
        run: |
          unzip version.zip
          echo "::set-output name=version::$(cat version.txt)"

  push:
    name: Push branch
    runs-on: ubuntu-latest
    needs:
      - load
    outputs:
      branch: ${{ steps.branch.outputs.name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
      - name: Install Go
        uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.16.4
      - name: Get Go environment
        id: go-env
        run: |
          echo "::set-output name=cache::$(go env GOCACHE)"
          echo "::set-output name=modcache::$(go env GOMODCACHE)"
      - name: Set up cache
        uses: actions/cache@v2.1.5
        with:
          path: |
            ${{ steps.go-env.outputs.cache }}
            ${{ steps.go-env.outputs.modcache }}
          key: merge-go-${{ hashFiles('**/go.sum') }}
          restore-keys: merge-go-
      - name: Set up Git config
        run: |
          git config user.name actions-user
          git config user.email actions@github.com
      - name: Fetch tags
        env:
          version: ${{ needs.load.outputs.version }}
        run: |
          git fetch origin \
            tag "${version}" \
            tag engine/badgerengine/"${version}" \
            tag cmd/genji/"${version}"
      - name: Merge release
        env:
          version: ${{ needs.load.outputs.version }}
        run: |
          echo "Before merge: $(git rev-parse HEAD)"
          git merge \
            refs/tags/"${version}" \
            refs/tags/engine/badgerengine/"${version}" \
            refs/tags/cmd/genji/"${version}"
          echo "After merge: $(git rev-parse HEAD)"
      - name: Add replace directives
        run: |
          go mod tidy
          git add go.mod go.sum
          (
            cd engine/badgerengine
            go mod edit -replace=github.com/genjidb/genji=../../ 
            go mod tidy
            git add go.mod go.sum
          )
          (
            cd cmd/genji
            go mod edit -replace=github.com/genjidb/genji=../../
            go mod edit -replace=github.com/genjidb/genji/engine/badgerengine=../../engine/badgerengine/
            go mod tidy
            git add go.mod go.sum
          )
          git commit --allow-empty -m 'Add replace directives [skip ci]'
      - name: Push PR branch
        id: branch
        env:
          version: ${{ needs.load.outputs.version }}
        run: |
          branch=merge-release-"${version}"
          git checkout -b "${branch}"
          git push origin "${branch}"
          echo "::set-output name=name::${branch}"

  merge:
    name: Create PR
    runs-on: ubuntu-latest
    needs:
      - load
      - push
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4
      - name: Create PR
        run: gh pr create -R="${repo}" -t="${title}" -b="${body}" -B="${base}" -H="${head}"
        env:
          repo: ${{ github.repository }}
          base: ${{ github.event.workflow_run.head_branch }}
          head: ${{ needs.push.outputs.branch }}
          # Ensure that default PR merge commit body contains [skip ci] so that we donâ€™t trigger release workflow.
          # See https://github.blog/changelog/2021-02-08-github-actions-skip
          title: 'Merge release tags for ${{ needs.load.outputs.version }} [skip ci]'
          body: |
            This PR merges ${{ needs.load.outputs.version }} release tags.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  rollback:
    name: Rollback
    runs-on: ubuntu-latest
    needs:
      - push
      - merge
    if: ${{ always() && !success() }}
    env:
      branch: ${{ needs.push.outputs.branch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4
      - name: Delete branch
        if: ${{ needs.push.result == 'success' }}
        run: git push origin :refs/heads/"${branch}"
