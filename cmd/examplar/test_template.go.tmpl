package {{ .Package }}

import (
    "bytes"
    "testing"

    "github.com/genjidb/genji"
    "github.com/genjidb/genji/document"
    "github.com/genjidb/genji/query"
    "github.com/stretchr/testify/require"
)

func Test{{ .TestName }}(t *testing.T) {
    db, err := genji.Open(":memory:")
    require.NoError(t, err)
    defer db.Close()

    // query results wrapper
    jsonResult := func(t *testing.T, res *query.Result) []byte {
        t.Helper()
        var buf bytes.Buffer
        err := document.IteratorToJSONArray(&buf, res)
        require.NoError(t, err)
        return buf.Bytes()
    }

    // teardown
    teardown := func() {
        // {{ (index .Teardown 0).Orig }}
        q := `
        {{- range .Teardown }}
        {{ .Text }}
        {{- end}}
        `
        err := db.Exec(q)
        require.NoError(t, err)
    }

    // setup
    setup := func() {
        // {{ (index .Setup 0).Orig }}
        q := `
        {{- range .Setup }}
        {{ .Text }}
        {{- end}}
        `
        err := db.Exec(q)
        require.NoError(t, err)
    }
    {{ "" }}
    {{- range .Tests }}
    // {{ .Orig }}
    t.Run("{{ .Name }}", func(t *testing.T) {
        t.Cleanup(teardown)
        setup()

        var err error
        var data []byte
        var expected string
        var q string
        var res *query.Result
        {{ "" }}

        {{- range .Statements }}
        // {{ (index .Code 0).Orig }}
        q = `
        {{- range .Code }}
        {{ .Text }}
        {{- end}}
        `

        res, err = db.Query(q)
        require.NoError(t, err)
        defer res.Close()

        data = jsonResult(t, res)
        require.NoError(t, err)
        {{ "" }}
        {{- if gt (len .Expectation) 1 }}
        // {{ (index .Expectation 0).Orig }}
        expected = `
        {{- range .Expectation }}
        {{ .Text }}
        {{- end  }}
        `
        {{- else }}
        expected = `{{ (index .Expectation 0).Text }}` // {{ (index .Expectation 0).Orig }}
        {{- end }}
        require.JSONEq(t, expected, string(data))
        {{- end }}
    })
    {{ "" }}
    {{- end }}
 }
